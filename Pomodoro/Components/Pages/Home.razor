@page "/"
@using System.Timers
@using Pomodoro.Entities
@using Pomodoro.Components.Pages.SmallComponents
@using Pomodoro.Services
@inject PomodoroTimer pomodoroTimer

<div class="outer-container-mt">
        <div class="icon-container">
            <i class="bi bi-arrow-down-up" @onclick="SwitchAutopilot"></i>
        </div>
        <div class="paragraph-container">
            @if (pomodoroTimer.IsAutopilot)
            {
                <span @onclick="SwitchAutopilot" class="fw-bold paragraph-near-icon">Autopilot</span>
            }
            else
            {
                <span @onclick="SwitchAutopilot" class="fw-bold paragraph-near-icon">Manual</span>
            }
        </div>
    </div>

<ConsumingCircle pomodoroTimer="@pomodoroTimer"></ConsumingCircle>
@if(!pomodoroTimer.IsAutopilot)
{
    <div class="outer-container-mt">
        @if(!pomodoroTimer.IsActive)
        {
                <div class="icon-container">
                <i class="bi bi-arrow-down-up" @onclick="SwitchTimer"></i>
                </div>
                <div class="paragraph-container">
                    <div class="paragraph-near-icon" @onclick="SwitchTimer"><span class="fw-bold">@GetTimerName()</span> @GetTimerLength() Min</div>
                </div>
        }
        else
        {
            <div class="paragraph-container">
                @GetTimerName()
            </div>
        }  
    </div>
}
else
{
    <div class="outer-container-mt">
        <div class="paragraph-container">
            <span class="fw-bold">@GetTimerName()</span> @GetTimerLength() Min
        </div>
    </div>
    <div class="outer-container">
        <div class="icon-container">
            @if (pomodoroTimer.AutopilotState > 0)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
            @if (pomodoroTimer.AutopilotState > 1)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
            @if (pomodoroTimer.AutopilotState > 2)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
            @if (pomodoroTimer.AutopilotState > 3)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
            @if (pomodoroTimer.AutopilotState > 4)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
            @if (pomodoroTimer.AutopilotState > 5)
            {
                <i class="bi bi-check"></i>
            }
            else
            {
                <i class="bi bi-x"></i>
            }
        </div>
    </div>
    <div class="outer-container-mt">
        <button type="button" class="btn btn-outline-light btn-sm reset-autopilot-button" @onclick="@pomodoroTimer.ResetAutopilotState">Reset Autopilot</button>
        <button type="button" class="btn btn-outline-light btn-sm reset-timer-button" @onclick="@pomodoroTimer.ResetCurrentTimer">Reset Timer</button>
    </div>
}

<TimerComplete></TimerComplete> 

<style>
    .outer-container-mt {
        display: flex;
        justify-content: center;
        margin-top: 15px;
    }

    .outer-container {
        display: flex;
        justify-content: center;
    }

    .icon-container {
        justify-content: center;
        align-items: center;
        color: #cdcdcd;
    }

    .paragraph-container {
        justify-content: center;
        align-items: center;
        font-size: 15px;
        color: #cdcdcd;
    }

    .paragraph-near-icon {
        margin-left: 5px;
    }

    .btn:focus, .btn:active {
        outline: none !important;
        box-shadow: none !important;
    }

    .reset-timer-button {
        margin-left: 5px;
    }

    .reset-autopilot-button {
        margin-right: 5px;
    }

    .reset-buttons-container {
        margin-top: 15px;
    }


</style>

@code {
    public bool IsShowing;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NotifyChange.OnChange += () => InvokeAsync(StateHasChanged);
    }
    private void SetTimer(ChangeEventArgs e)
    {
        pomodoroTimer.IsAutopilot = (bool)e.Value;
        if((bool)e.Value)
        {
            pomodoroTimer.SetAutopilot();
        }
        else
        {
            pomodoroTimer.SetProduction();
        }
    }

    private void SwitchTimer()
    {
        switch (pomodoroTimer.Name.ToUpper())
        {
            case "PRODUCTION":
                pomodoroTimer.SetShortPause();
                break;
            case "SHORTPAUSE":
                pomodoroTimer.SetLongPause();
                break;
            case "LONGPAUSE":
                pomodoroTimer.SetProduction();
                break;
        }
    }

    private string GetTimerName()
    {
        string result = "";
        switch(pomodoroTimer.Name.ToUpper())
        {
            case "PRODUCTION":
                result = "Production";
                break;
            case "SHORTPAUSE":
                result = "Short Pause";
                break;
            case "LONGPAUSE":
                result = "Long Pause";
                break;
        }
        return result;
    }

    private int GetTimerLength()
    {
        int result = 0;
        switch (pomodoroTimer.Name.ToUpper())
        {
            case "PRODUCTION":
                result = Preferences.Get("Production", PomodoroTimer.ProductionLength);
                break;
            case "SHORTPAUSE":
                result = Preferences.Get("ShortPause", PomodoroTimer.ShortPauseLength);
                break;
            case "LONGPAUSE":
                result = Preferences.Get("LongPause", PomodoroTimer.LongPauseLength);
                break;
        }
        return result;
    }

    private void SwitchAutopilot()
    {
        if(pomodoroTimer.IsAutopilot)
        {
            pomodoroTimer.IsAutopilot = false;
        }
        else
        {
            pomodoroTimer.IsAutopilot = true;
        }
    }
}