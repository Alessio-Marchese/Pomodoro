@page "/"
@using System.Timers
@using Pomodoro.Entities
@using Pomodoro.Components.Pages.SmallComponents
@using Pomodoro.Services
@inject PomodoroTimer pomodoroTimer

<ConsumingCircle pomodoroTimer="@pomodoroTimer"></ConsumingCircle>
@if(!pomodoroTimer.IsAutopilot)
{
    <button class="btn btn-secondary" @onclick="@pomodoroTimer.SetProduction">PRODUCTION @Preferences.Get("Production", PomodoroTimer.ProductionLength)</button>
    <button class="btn btn-secondary" @onclick="@pomodoroTimer.SetShortPause">SHORT PAUSE @Preferences.Get("ShortPause", PomodoroTimer.ShortPauseLength)</button>
    <button class="btn btn-secondary" @onclick="@pomodoroTimer.SetLongPause">LONG PAUSE @Preferences.Get("LongPause", PomodoroTimer.LongPauseLength)</button>
}
else
{
    <button class="btn btn-secondary" @onclick="@pomodoroTimer.ResetAutopilotState">RESET AUTOPILOT</button>
}
<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="Autopilot" @onchange="SetTimer" checked="@pomodoroTimer.IsAutopilot">
    <label class="form-check-label" for="Autopilot">Autopilot</label>
</div>
<p>current state @pomodoroTimer.AutopilotState</p>
<TimerComplete></TimerComplete> 

@code {
    public bool IsShowing;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NotifyChange.OnChange += () => InvokeAsync(StateHasChanged);
    }
    private void SetTimer(ChangeEventArgs e)
    {
        pomodoroTimer.IsAutopilot = (bool)e.Value;
        if((bool)e.Value)
        {
            pomodoroTimer.SetAutopilot();
        }
        else
        {
            pomodoroTimer.SetProduction();
        }
    }
}