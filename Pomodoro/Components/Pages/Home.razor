@page "/"
@using System.Timers
@using Pomodoro.Entities
@using Pomodoro.Components.Pages.SmallComponents
@using Pomodoro.Services
@inject PomodoroTimer pomodoroTimer
@inject NotifyChangeService notifyChangeService

<h1>@pomodoroTimer.FormattedTime</h1>
<button class="btn btn-warning" @onclick="@pomodoroTimer.Break">BREAK</button>
<button class="btn btn-primary" @onclick="@pomodoroTimer.Start">START</button>
<button class="btn btn-secondary" @onclick="@pomodoroTimer.SetProduction">PRODUCTION</button>
<button class="btn btn-secondary" @onclick="@pomodoroTimer.SetShortPause">SHORT PAUSE</button>
<button class="btn btn-secondary" @onclick="@pomodoroTimer.SetLongPause">LONG PAUSE</button>
<button class="btn btn-secondary" @onclick="@pomodoroTimer.ResetAutopilotState">RESET AUTOPILOT</button>
<p>current state @pomodoroTimer.AutopilotState</p>
<TimerComplete></TimerComplete> 

@code {
    public bool IsShowing;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        pomodoroTimer.OnTimeChanged += UpdateUI;
        pomodoroTimer.OnStateChanged += UpdateUI;
        notifyChangeService.OnChange += UpdateUI;
    }
    private void UpdateUI()
    {
        InvokeAsync(StateHasChanged);
    }
}