@using Pomodoro.Entities

<div style="display: flex; justify-content: center;">
    <svg width="250" height="250" viewBox="0 0 100 100">
        <circle cx="50" cy="50" r="45" stroke="#51c5cf" stroke-width="5" fill="white"
                stroke-dasharray="282.6" stroke-dashoffset="@pomodoroTimer.StrokeDashOffset"
                transform="rotate(-90 50 50)" @onclick="PauseOrResume"/>
        <text x="50" y="55" text-anchor="middle" font-size="16" fill="#51c5cf" style="display:@(pomodoroTimer.IsActive ? "block" : "none");" @onclick="PauseOrResume">
            @pomodoroTimer.FormattedTime
        </text>
        <foreignObject x="35" y="35" width="30" height="30" style="display:@(pomodoroTimer.IsActive ? "none" : "block");" @onclick="PauseOrResume">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; justify-content: center; align-items: center; height: 100%; width: 100%;">
                <i class="bi bi-play-fill" style="font-size: 2rem; color: #51c5cf;"></i>
            </div>
        </foreignObject>
    </svg>
</div>

@code {
    [Parameter]
    public PomodoroTimer pomodoroTimer { get; set; }

    private void PauseOrResume()
    {
        if (pomodoroTimer.IsActive)
        {
            pomodoroTimer.Break();
        }
        else
        {
            pomodoroTimer.Start();
        }
    }
}
