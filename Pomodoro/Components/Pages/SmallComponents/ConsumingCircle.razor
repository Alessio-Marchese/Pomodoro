@using Pomodoro.Entities

<div class="container">
    <svg viewBox="0 0 100 100">
        <circle class="circle"
                cx="50" cy="50" r="@PomodoroTimer.CircleRadius"
                stroke-dasharray="@pomodoroTimer.StrokeDashOffSet"
                stroke-dashoffset="@pomodoroTimer.CurrentStrokeDashOffet"
                transform="rotate(-90 50 50)" @onclick="PauseOrResume" />
        <text class="text" x="50" y="55" style="display:@(pomodoroTimer.IsActive ? "block" : "none");" @onclick="PauseOrResume">
            @pomodoroTimer.FormattedTime
        </text>
        <foreignObject x="37" y="35" width="30" height="30" style="display:@(pomodoroTimer.IsActive ? "none" : "block");" @onclick="PauseOrResume">
            <div xmlns="http://www.w3.org/1999/xhtml" class="play-button">
                <i class="bi bi-play-fill play-icon"></i>
            </div>
        </foreignObject>
    </svg>
</div>

<style>
    .container {
        display: flex;
        justify-content: center;
        width: 100vw;
        height: auto;
        margin-top: 15px;
    }

    .circle {
        stroke: #cdcdcd;
        stroke-width: 5;
        fill: #404040;
    }

    .text {
        text-anchor: middle;
        font-size: 16px;
        fill: #cdcdcd;
    }

    .hidden {
        display: none;
    }

    .play-button {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
    }

    .play-icon {
        font-size: 2rem;
        color: #cdcdcd;
    }
</style>

@code {
    [Parameter]
    public PomodoroTimer pomodoroTimer { get; set; }

    private void PauseOrResume()
    {
        if (pomodoroTimer.IsActive)
        {
            pomodoroTimer.Break();
        }
        else
        {
            pomodoroTimer.Start();
        }
    }
}
